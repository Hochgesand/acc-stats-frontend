{"version":3,"sources":["api/useGetRequest.tsx","sessions/SessionRow.tsx","api/endpoints.ts","Loading.tsx","sessions/SessionTable.tsx","App.tsx","reportWebVitals.ts","sessions/session/SessionInformation.tsx","Error.tsx","sessions/session/DriverInformation.tsx","sessions/session/LapEntry.tsx","sessions/session/LapTable.tsx","sessions/session/Session.tsx","index.tsx"],"names":["useGetRequest","path","getData","fetch","method","headers","undefined","then","response","a","ok","Error","json","SessionRow","driveSession","id","className","trackName","href","baseUrl","BackendEndpointSessions","BackendEndpointSession","Loading","SessionTable","useState","data","setData","loading","setLoading","useEffect","fetchData","map","item","created_at","metaData","raceWeekendIndex","serverName","sessionIndex","sessionType","updated_at","bestLapTimeFormatted","bestLapTime","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SessionInformation","error","xmlns","fill","viewBox","d","msg","DriverInformation","driver","firstName","lastName","shortName","LapEntry","lap","driverName","lapTimeFormatted","split1Formatted","split2Formatted","split3Formatted","JaNein","num","isValidForBest","LapTable","sessionBigData","lapData","setLapData","setError","session","forEach","drivers","driverId","catch","err","message","length","carId","lapTime","sessionId","split1","split2","split3","Session","cars","laps","temp","bestLapTimeNum","Number","MAX_VALUE","x","playerId","ReactDOM","render","StrictMode","exact","props","match","params","document","getElementById"],"mappings":"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","file":"static/js/main.cd58befe.chunk.js","sourcesContent":["interface GetRequestProps {\n  readonly path: string;\n}\n\nexport default function useGetRequest({ path }: GetRequestProps) {\n  const getData = () => fetch(path, {\n    method: \"get\",\n    headers: \"\"\n      ? new Headers({\n        \"Content-Type\": \"application/json\"\n      }) : undefined\n  }).then(async (response) => {\n    if (!response.ok){\n      throw Error(\"Could not fetch data\");\n    }\n    return response.json()\n  });\n\n  return { getData  };\n}\n","import DriveSession from \"../interfaces/DriveSession\"\n\nexport default function SessionRow(driveSession: DriveSession){\n  return(\n    <tr>\n      <td>{driveSession.id}</td>\n      <td className={\"content-end\"}>{driveSession.trackName}</td>\n      <td><a href={\"/session/\" + driveSession.id}><button className={\"btn\"}>Go To Session</button></a></td>\n    </tr>\n  );\n}\n","const baseUrl = \"https://acc-api.aptinstall.de\"\n\nexport const BackendEndpointSessions = `${baseUrl}/sessions`;\nexport const BackendEndpointSession = `${baseUrl}/session`;\n\n","export default function Loading(){\n  return(\n    <button className=\"btn btn-lg loading\">loading</button>\n  );\n}\n","import React, {useEffect, useState} from \"react\";\nimport useGetRequest from \"../api/useGetRequest\";\nimport SessionRow from \"./SessionRow\";\nimport DriveSession from \"../interfaces/DriveSession\";\nimport {BackendEndpointSessions} from \"../api/endpoints\";\nimport Loading from \"../Loading\";\n\n\nexport default function SessionTable() {\n  const [data, setData] = useState([{} as DriveSession]);\n  const [loading, setLoading] = useState(true);\n  const {getData} = useGetRequest({path: `${BackendEndpointSessions}`});\n\n  useEffect(() => {\n    async function fetchData() {\n      await getData().then(function (json){\n        setData(json);\n        setLoading(false)\n      });\n    }\n    fetchData();\n  }, [getData]);\n\n  if (loading){\n    return (\n      <Loading/>\n    );\n  }\n\n  return(\n    <div className={\"grid grid-cols-2\"}>\n      <div className={\"col-span-1 h-10 card bg-base-300 rounded-box place-items-center\"}>\n        <h2 className={\"align-middle m-auto\"}>All Sessions</h2>\n      </div>\n      <div/>\n      <div className=\"overflow-x-auto mt-2\">\n        <table className=\"table\">\n          <thead>\n          <tr>\n            <th>ID</th>\n            <th>Session</th>\n            <th/>\n          </tr>\n          </thead>\n          <tbody >\n          {data.map(item =>\n            <SessionRow created_at={item.created_at}\n                        id={item.id}\n                        metaData={item.metaData}\n                        raceWeekendIndex={item.raceWeekendIndex}\n                        serverName={item.serverName}\n                        sessionIndex={item.sessionIndex}\n                        sessionType={item.sessionType}\n                        trackName={item.trackName}\n                        updated_at={item.updated_at}\n                        bestLapTimeFormatted={item.bestLapTimeFormatted}\n                        bestLapTime={item.bestLapTime}/>)}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.scss';\nimport './index.scss'\nimport SessionTable from \"./sessions/SessionTable\";\n\n\nfunction App() {\n  return (\n    <div className={\"lander w-full h-full rounded-md px-4 py-4\"}>\n      <h2>\n        <SessionTable/>\n      </h2>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import DriveSession from \"../../interfaces/DriveSession\";\n\nexport default function SessionInformation(driveSession: DriveSession) {\n  return (\n    <div>\n      <div className=\"h-10 w-11/12 card bg-base-200 rounded-box place-items-center w-auto m-2 p-2\">\n        <h2>Sessioninformation</h2>\n      </div>\n      <div className=\"h-10 w-11/12 card bg-base-200 rounded-box place-items-center m-2 p-2\">\n        {driveSession.id}\n      </div>\n      <div className=\"h-10 card w-11/12 bg-base-200 rounded-box place-items-center m-2 p-2\">\n        {driveSession.trackName}\n      </div>\n      <div className=\"h-auto card w-11/12 bg-base-200 rounded-box place-items-center m-2 p-2\">\n        {driveSession.serverName}\n      </div>\n      <div className=\"h-auto card w-11/12 bg-base-200 rounded-box place-items-center m-2 p-2\">\n        Best Laptime overall: {driveSession.bestLapTimeFormatted}\n      </div>\n    </div>\n  );\n}\n","interface errorProp {\n  msg: string\n}\n\nexport default function Error(error: errorProp){\n  return(\n    <div className=\"alert alert-error m-4\">\n      <div className=\"flex-1\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" className=\"w-6 h-6 mx-2 stroke-current\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n        d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\"/>\n          </svg>\n          <label>{error.msg}</label>\n      </div>\n    </div>\n  )\n}\n","import Driver from \"../../interfaces/sessionData/Driver\";\n\nexport default function DriverInformation(driver: Driver) {\n  return(\n    <tr>\n      <td>{driver.firstName}</td>\n      <td className={\"content-end\"}>{driver.lastName}</td>\n      <td>{driver.shortName}</td>\n      <td>{driver.bestLapTime}</td>\n    </tr>\n  );\n}\n","import {Lap} from \"../../interfaces/sessionData/Lap\";\n\ninterface IJaNein {\n  num: number\n}\n\nexport default function LapEntry(lap: Lap){\n  return(\n    <tr>\n      <td>{lap.id}</td>\n      <td>{lap.driverName}</td>\n      <td>{lap.lapTimeFormatted}</td>\n      <td>{lap.split1Formatted}</td>\n      <td>{lap.split2Formatted}</td>\n      <td>{lap.split3Formatted}</td>\n      <JaNein num={lap.isValidForBest}/>\n    </tr>\n  );\n}\n\nfunction JaNein(num: IJaNein){\n  if (num.num === 1){\n    return (\n      <td>\n        Yes\n      </td>\n    )\n  }\n  return (\n    <td>\n      No\n    </td>\n  );\n}\n","import React, {useEffect, useState} from \"react\";\nimport useGetRequest from \"../../api/useGetRequest\";\nimport {BackendEndpointSession} from \"../../api/endpoints\";\nimport Loading from \"../../Loading\";\nimport Error from \"../../Error\";\nimport {Lap} from \"../../interfaces/sessionData/Lap\";\nimport SessionBigData from \"../../interfaces/sessionData/SessionBigData\";\nimport LapEntry from \"./LapEntry\";\n\n\nexport default function LapTable(sessionBigData: SessionBigData){\n  const [lapData, setLapData] = useState([] as Lap[]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\")\n  const path = `${BackendEndpointSession}/${sessionBigData.session?.id}/laps`;\n  const {getData} = useGetRequest({path: path})\n\n  useEffect(() => {\n    async function fetchData() {\n      await getData().then(function (json){\n        let laps: Lap[] = [];\n        laps = json\n        laps.forEach(lap =>{\n          sessionBigData.drivers?.forEach(driver => {\n            if (driver.id === lap.driverId){\n              lap.driverName = driver.shortName;\n            }\n          });\n        });\n\n        setLapData(json);\n        setLoading(false)\n      }).catch( err =>{\n          setError(err.message)\n          setLoading(false);\n        }\n      );\n    }\n    fetchData();\n  }, [getData, sessionBigData.drivers]);\n\n\n\n  if (loading){\n    return <Loading/>\n  }\n\n  if (error.length > 0){\n    return(\n      <Error msg={error}/>\n    );\n  }\n\n  return (\n    <div className={\"overflow-x-auto mt-5 col-span-4 bg-base-300 p-4 rounded-box w-6/12\"}>\n      <table className={\"table\"}>\n        <thead>\n        <tr>\n          <th>id</th>\n          <th>Name</th>\n          <th>Laptime</th>\n          <th>Split 1</th>\n          <th>Split 2</th>\n          <th>Split 3</th>\n          <th>Valid</th>\n        </tr>\n        </thead>\n        <tbody>\n        {lapData.map(lap =>\n          <LapEntry\n            carId={lap.carId}\n            created_at={lap.created_at}\n            driverId={lap.driverId}\n            id={lap.id}\n            isValidForBest={lap.isValidForBest}\n            lapTime={lap.lapTime}\n            lapTimeFormatted={lap.lapTimeFormatted}\n            sessionId={lap.sessionId}\n            split1={lap.split1}\n            split1Formatted={lap.split1Formatted}\n            split2={lap.split2}\n            split2Formatted={lap.split2Formatted}\n            split3={lap.split3}\n            split3Formatted={lap.split3Formatted}\n            updated_at={lap.updated_at}\n            driverName={lap.driverName}\n          />)}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import SessionInformation from \"./SessionInformation\";\nimport useGetRequest from \"../../api/useGetRequest\";\nimport React, {useEffect, useState} from \"react\";\nimport Error from \"../../Error\";\nimport {BackendEndpointSession} from \"../../api/endpoints\";\nimport Loading from \"../../Loading\";\nimport SessionBigData from \"../../interfaces/sessionData/SessionBigData\";\nimport Driver from \"../../interfaces/sessionData/Driver\";\nimport Car from \"../../interfaces/sessionData/Car\";\nimport DriverInformation from \"./DriverInformation\";\nimport LapTable from \"./LapTable\";\nimport {Lap} from \"../../interfaces/sessionData/Lap\";\n\nexport interface propId {\n  id: string\n}\n\nexport default function Session({id}: propId) {\n  const [data, setData] = useState({session: {}, cars: [] as Car[], laps: [] as Lap[], drivers: [] as Driver[]} as SessionBigData);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\")\n  const {getData} = useGetRequest({path: `${BackendEndpointSession}/${id}`})\n\n  useEffect(() => {\n      async function fetchData() {\n        await getData().then(function (json){\n          let temp: SessionBigData = json;\n\n          temp.drivers?.forEach(driver => {\n            driver.bestLapTimeNum = Number.MAX_VALUE\n            temp.session.bestLapTime = Number.MAX_VALUE\n            temp.laps?.forEach(lap => {\n              if (driver.id === lap.driverId && lap.lapTime < driver.bestLapTimeNum){\n                driver.bestLapTimeNum = lap.lapTime;\n                driver.bestLapTime = lap.lapTimeFormatted;\n                if (lap.lapTime < temp.session.bestLapTime){\n                  temp.session.bestLapTimeFormatted = lap.lapTimeFormatted\n                }\n              }\n            });\n          })\n\n          setData(temp);\n          setLoading(false)\n        }).catch( err =>{\n            setError(err.message)\n            setLoading(false);\n          }\n        );\n      }\n      fetchData();\n    }, [getData]);\n\n  if (loading){\n    return <Loading/>\n  }\n\n  if (error.length > 0){\n    return(\n      <Error msg={error}/>\n    );\n  }\n\n  if (data.session != null && data.drivers != null){\n    return (\n      <div className={\"p-5\"}>\n        <div className=\"flex flex-row w-full\">\n          <div className=\"grid h-auto card bg-base-300 rounded-box place-items-center mb-3 p-2\">\n            <SessionInformation created_at={data.session.created_at} id={data.session.id} metaData={data.session.metaData} raceWeekendIndex={data.session.raceWeekendIndex} serverName={data.session.serverName} sessionIndex={data.session.sessionIndex} sessionType={data.session.sessionType} trackName={data.session.trackName} updated_at={data.session.updated_at} bestLapTime={data.session.bestLapTime} bestLapTimeFormatted={data.session.bestLapTimeFormatted}/>\n          </div>\n          <div className=\"overflow-x-auto mb-3 ml-5 col-span-4 bg-base-300 p-4 rounded-box w-5/12\">\n            <table className=\"table-zebra table w-full\">\n              <thead>\n              <tr>\n                <th>Driver</th>\n                <th>Name</th>\n                <th>Shortname</th>\n                <th>Best lap time</th>\n              </tr>\n              </thead>\n              <tbody >\n              {data.drivers.map(x =>\n                <DriverInformation created_at={x.created_at} firstName={x.firstName} id={x.id} lastName={x.lastName} playerId={x.playerId} shortName={x.shortName} updated_at={x.updated_at} bestLapTime={x.bestLapTime} bestLapTimeNum={x.bestLapTimeNum}/>\n              )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n      <LapTable session={data.session} cars={data.cars} drivers={data.drivers} />\n    </div>\n    );\n  }\n\n  return(\n    <div/>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Session from \"./sessions/session/Session\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/session/:id\" render={(props) => (\n          <Session id={props.match.params.id}/>\n        )} />\n        <Route path=\"/\">\n          <App/>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}