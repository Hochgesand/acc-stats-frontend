{"version":3,"sources":["Loading.tsx","Error.tsx","api/endpoints.ts","api/APIService.tsx","api/UseAPI.tsx","sessions/stats/Cars/CarModelNameById.tsx","sessions/stats/generalServerStats/GeneralServerStats.tsx","sessions/MainLanderPage.tsx","sessions/session/SessionInformation.tsx","sessions/session/DriverInformation.tsx","api/useGetRequest.tsx","sessions/session/LapEntry.tsx","sessions/session/LapTable.tsx","sessions/session/Session.tsx","sessions/stats/Cars/CarNameById.tsx","sessions/stats/driverStats/DriverStats.tsx","sessions/stats/sessionSelectionPages/AllSessionsTable.tsx","sessions/stats/sessionSelectionPages/HighscoreBoard.tsx","sessions/stats/sessionSelectionPages/SessionselectionPage.tsx","sessions/stats/driverStats/AllDriver.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Loading","className","Error","error","xmlns","fill","viewBox","d","msg","baseUrl","BackendEndpointSessions","BackendEndpointSession","getRequest","path","a","fetch","method","headers","undefined","then","response","ok","json","APIService","getSessions","getSession","id","push","getTimesOfDriverById","getCarModels","convertedCarmodels","Object","entries","map","key","value","name","getSpecificCarByCarId","getSpecificCarModelByCarId","getPlayerById","getGenericServerStats","getAllDrivers","UseAPI","params","useState","data","setData","isLoading","setIsLoading","setError","fetchData","temp","message","useEffect","CarModelNameById","useAPI","GeneralServerStats","useApiStats","piechartConfig","labels","datasets","label","backgroundColor","hoverOffset","totalInvalidLaps","totalValidLaps","length","options","responsive","color","totalTimeWastedFormatted","mostLapsDrivenInASession","href","mostLapsDriveInASessionId","totalUniquePlayerCount","carModelIdWithMostLaps","carModelWithMostLapsLapCount","MainLanderPage","SessionInformation","driveSession","created_at","trackName","serverName","bestLapTimeFormatted","bestDriver","DriverInformation","driver","bestLapTime","firstName","lastName","shortName","useGetRequest","getData","LapEntry","lap","lapTimeFormatted","driverName","split1Formatted","split2Formatted","split3Formatted","JaNein","num","isValidForBest","LapTable","sessionBigData","lapData","setLapData","loading","setLoading","session","forEach","drivers","driverId","catch","err","Session","cars","laps","Number","MAX_VALUE","bestLapTimeNum","lapTime","fastestLap","compileData","metaData","raceWeekendIndex","sessionIndex","sessionType","updated_at","x","CarNameById","carName","DriverStats","playerData","bestTimeCarId","bestTimeSessionId","AllSessionsTable","item","SessionRow","HighscoreBoard","TrackRow","avgLapTime","avgLapTimeFormatted","bestTimedriverId","trackTimes","SessionselectionPage","AllDriver","api","App","stroke","exact","render","props","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.341bde7b.chunk.js","sourcesContent":["export default function Loading(){\n  return(\n    <button className=\"btn btn-lg loading\">loading</button>\n  );\n}\n","interface errorProp {\n  msg: string\n}\n\nexport default function Error(error: errorProp){\n  return(\n    <div className=\"alert alert-error m-4\">\n      <div className=\"flex-1\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" className=\"w-6 h-6 mx-2 stroke-current\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n        d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\"/>\n          </svg>\n          <label>{error.msg}</label>\n      </div>\n    </div>\n  )\n}\n","export const baseUrl = \"https://acc-api.aptinstall.de\"\n\nexport const BackendEndpointSessions = `${baseUrl}/sessions`;\nexport const BackendEndpointSession = `${baseUrl}/session`;\n\n","import {BackendEndpointSession, BackendEndpointSessions, baseUrl} from \"./endpoints\";\nimport DriveSession from \"../interfaces/DriveSession\";\nimport SessionBigData from \"../interfaces/SessionBigData\";\nimport {CarModel} from \"../interfaces/CarModel\";\nimport Car from \"../interfaces/Car\";\nimport {Besttimes} from \"../interfaces/Besttimes\";\nimport {OverallStats} from \"../interfaces/OverallStats\";\nimport Driver from \"../interfaces/Driver\";\nimport {Player} from \"../interfaces/Player\";\n\nasync function getRequest(path: string) {\n  return fetch(path, {\n    method: \"get\",\n    headers: \"\"\n      ? new Headers({\n        \"Content-Type\": \"application/json\"\n      }) : undefined\n  }).then(async (response) => {\n    if (!response.ok){\n      throw Error(\"Could not fetch data\");\n    }\n    return response.json()\n  })\n}\n\nconst APIService = {\n  getSessions: async() => {\n    const response: DriveSession[] = await getRequest(`${BackendEndpointSessions}`)\n    return response\n  },\n\n  getSession: async(id: number) => {\n    const response: SessionBigData[] = [];\n    response.push(await getRequest(`${BackendEndpointSession}/${id}`))\n    return response\n  },\n\n  getTimesOfDriverById: async(id: number) => {\n    const response: Besttimes[] = await getRequest(`${baseUrl}/driver/${id}/times`)\n    return response\n  },\n\n  getCarModels: async() => {\n    let convertedCarmodels: CarModel[] = []\n    const listItems = Object.entries(await getRequest(`${baseUrl}/car/models`))\n    // eslint-disable-next-line array-callback-return\n    listItems.map(([key, value]: any) => {\n      convertedCarmodels.push({id: key, name: value})\n    })\n    return convertedCarmodels\n  },\n\n  getSpecificCarByCarId: async(id: number) => {\n    const response: Car[] = [];\n    response.push(await getRequest(`${baseUrl}/car/${id}`))\n    return response\n  },\n\n  getSpecificCarModelByCarId: async(id: number) => {\n    const response: CarModel[] = [];\n    response.push(await getRequest(`${baseUrl}/car/model/${id}`))\n    return response\n  },\n\n  getPlayerById: async(id: number) => {\n    const response: Player[] = [];\n    response.push(await getRequest(`${baseUrl}/driver/${id}`))\n    return response\n  },\n\n  getGenericServerStats: async() => {\n    const response: OverallStats[] = [];\n    response.push(await getRequest(`${baseUrl}/stats`))\n    return response\n  },\n\n  getAllDrivers: async() => {\n    const response: Driver[] = await getRequest(`${baseUrl}/drivers`)\n    return response\n  }\n}\n\nexport default APIService\n","import {useEffect, useState} from \"react\";\nimport APIService from \"./APIService\";\n\nexport default function UseAPI(method: string, ...params: any[]){\n  const [data, setData]           = useState([] as any[]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError]         = useState(\"\");\n\n  const fetchData = async () => {\n    setError(\"\");\n\n    try {\n      setIsLoading(true);\n      // @ts-ignore\n      const temp: any = await APIService[method](...params)\n      setData(temp);\n    } catch (e: any) {\n      setError(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => { fetchData() }, []);// eslint-disable-line react-hooks/exhaustive-deps\n\n  return { data, isLoading, error, fetchData };\n}\n","import UseAPI from \"../../../api/UseAPI\";\nimport Loading from \"../../../Loading\";\nimport React from \"react\";\n\ninterface props {\n  id: number\n}\n\nexport default function CarModelNameById({id}: props) {\n  const useAPI = UseAPI('getSpecificCarModelByCarId', id)\n\n  if (useAPI.isLoading)\n    return (\n      <Loading/>\n    )\n\n  return(\n    <>{useAPI.data[0] === undefined ? \"error\" : useAPI.data[0].name}</>\n  )\n}\n","import Loading from \"../../../Loading\";\nimport Error from \"../../../Error\";\nimport React from \"react\";\nimport {Doughnut} from 'react-chartjs-2';\nimport UseAPI from \"../../../api/UseAPI\";\nimport CarModelNameById from \"../Cars/CarModelNameById\";\n\nexport default function GeneralServerStats() {\n  const useApiStats = UseAPI('getGenericServerStats')\n\n  let piechartConfig = {\n    labels: [\n      'invalid laps',\n      'valid laps',\n    ],\n    datasets: [{\n      label: 'LapsData',\n      data: [0, 0],\n      backgroundColor: [\n        'rgb(255,0,0)',\n        'rgb(48,255,0)',\n      ],\n      hoverOffset: 0\n    }],\n  };\n\n  if (!useApiStats.isLoading) {\n    piechartConfig = {\n      labels: [\n        'invalid laps',\n        'valid laps',\n      ],\n      datasets: [{\n        label: 'LapsData',\n        data: [useApiStats.data[0].totalInvalidLaps, useApiStats.data[0].totalValidLaps],\n        backgroundColor: [\n          'rgb(255,0,0)',\n          'rgb(48,255,0)',\n        ],\n        hoverOffset: 0\n      }],\n    };\n  }\n\n  if (useApiStats.isLoading) {\n    return <Loading/>\n  }\n\n  if (useApiStats.error.length > 0) {\n    return (\n      <Error msg={useApiStats.error}/>\n    );\n  }\n\n  return (\n    <div className={\"w-100 grid grid-rows-1 gap-4 \"}>\n      <div className={\"h-auto text-white mb-3 bg-base-300 p-4 rounded-box w-full\"}>\n        <p className={\"text-2xl\"}>Some general useless information about our servers</p>\n        <div className={\"divider\"}/>\n        <Doughnut data={piechartConfig} options={{responsive: true, color: \"red\"}}/>\n        <p className={\"mt-4 text-2xl\"}>Accumulated wasted time on all servers</p>\n        <p>{useApiStats.data[0].totalTimeWastedFormatted}</p>\n        <div className={\"divider\"}/>\n        <p className={\"mt-4 text-2xl\"}>Session with most laps driven</p>\n        <p>{useApiStats.data[0].mostLapsDrivenInASession}\n        <a href={\"/session/\" + useApiStats.data[0].mostLapsDriveInASessionId}>\n          <button className={\"ml-2 btn btn-sm\"}>Go To Session</button>\n        </a></p>\n        <div className={\"divider\"}/>\n        <p className={\"mt-4 text-2xl\"}>Unique player counter</p>\n        <p>{useApiStats.data[0].totalUniquePlayerCount}</p>\n        <div className={\"divider\"}/>\n        <p className={\"mt-4 text-2xl\"}>Most popular car and driven laps</p>\n        <p><CarModelNameById id={useApiStats.data[0].carModelIdWithMostLaps}/></p>\n        <p>Total laps: {useApiStats.data[0].carModelWithMostLapsLapCount}</p>\n      </div>\n    </div>\n  )\n}\n","import React from \"react\";\nimport GeneralServerStats from \"./stats/generalServerStats/GeneralServerStats\";\n\n\nexport default function MainLanderPage() {\n  return (\n    <div>\n      <div className={\"flex flex-row\"}>\n        <GeneralServerStats/>\n        <div className={\"flex flex-col ml-4\"}>\n          <a href={\"/sessions\"}><button className={\"btn h-auto\"}>Show all Sessions and Sessionscoreboard</button></a>\n          <a href={\"/drivers\"} className={\"mt-4\"}><button className={\"btn h-auto\"}>Show all Drivers</button></a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import DriveSession from \"../../interfaces/DriveSession\";\n\nexport default function SessionInformation(driveSession: DriveSession) {\n  return (\n    <div>\n      <div className=\"h-10 w-11/12 card bg-base-200 rounded-box place-items-center w-auto m-2 p-2\">\n        <h2>Sessioninformation</h2>\n      </div>\n      <div className=\"h-10 w-11/12 card bg-base-200 rounded-box place-items-center m-2 p-2\">\n        {driveSession.created_at}\n      </div>\n      <div className=\"h-10 card w-11/12 bg-base-200 rounded-box place-items-center m-2 p-2\">\n        {driveSession.trackName}\n      </div>\n      <div className=\"h-auto card w-11/12 bg-base-200 rounded-box place-items-center m-2 p-2\">\n        {driveSession.serverName}\n      </div>\n      <div className=\"h-auto card w-11/12 bg-base-200 rounded-box place-items-center m-2 p-2\">\n        Best Laptime overall: {driveSession.bestLapTimeFormatted} | {driveSession.bestDriver}\n      </div>\n    </div>\n  );\n}\n","import Driver from \"../../interfaces/Driver\";\nimport React from \"react\";\n\nexport interface props{\n  driver: Driver\n  bestLapTime: string\n}\n\nexport default function DriverInformation({driver, bestLapTime}: props) {\n  return(\n    <tr className={`${bestLapTime === driver.bestLapTime ? \"text-green-500\" : \"\"}`}>\n      <td>{driver.firstName}</td>\n      <td className={\"content-end\"}>{driver.lastName}</td>\n      <td>{driver.shortName}</td>\n      <td>{driver.bestLapTime}</td>\n      <td><a href={\"/driver/\" + driver.id}><button className={\"btn\"}>Go To Driver</button></a></td>\n    </tr>\n  );\n}\n","interface GetRequestProps {\n  readonly path: string;\n}\n\nexport default function useGetRequest({ path }: GetRequestProps) {\n  const getData = () => fetch(path, {\n    method: \"get\",\n    headers: \"\"\n      ? new Headers({\n        \"Content-Type\": \"application/json\"\n      }) : undefined\n  }).then(async (response) => {\n    if (!response.ok){\n      throw Error(\"Could not fetch data\");\n    }\n    return response.json()\n  });\n\n  return { getData  };\n}\n","import {Lap} from \"../../interfaces/Lap\";\nimport React from \"react\";\n\ninterface IJaNein {\n  num: number\n}\n\nexport interface props {\n  lap: Lap\n  bestLapTime: string\n}\n\nexport default function LapEntry({lap, bestLapTime}:props){\n  return(\n    <tr className={`${bestLapTime === lap.lapTimeFormatted ? \"text-green-500\" : \"\"}`}>\n      <td>{lap.id}</td>\n      <td>{lap.driverName}</td>\n      <td>{lap.lapTimeFormatted}</td>\n      <td>{lap.split1Formatted}</td>\n      <td>{lap.split2Formatted}</td>\n      <td>{lap.split3Formatted}</td>\n      <JaNein num={lap.isValidForBest}/>\n    </tr>\n  );\n}\n\nfunction JaNein(num: IJaNein){\n  if (num.num === 1){\n    return (\n      <td>\n        Yes\n      </td>\n    )\n  }\n  return (\n    <td>\n      No\n    </td>\n  );\n}\n","import React, {useEffect, useState} from \"react\";\nimport useGetRequest from \"../../api/useGetRequest\";\nimport {BackendEndpointSession} from \"../../api/endpoints\";\nimport Loading from \"../../Loading\";\nimport Error from \"../../Error\";\nimport {Lap} from \"../../interfaces/Lap\";\nimport SessionBigData from \"../../interfaces/SessionBigData\";\nimport LapEntry from \"./LapEntry\";\n\nexport interface props {\n  sessionBigData: SessionBigData\n  bestLapTime: string\n}\n\nexport default function LapTable({sessionBigData, bestLapTime}: props){\n  const [lapData, setLapData] = useState([] as Lap[]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\")\n  const path = `${BackendEndpointSession}/${sessionBigData.session?.id}/laps`;\n  const {getData} = useGetRequest({path: path})\n\n  useEffect(() => {\n    async function fetchData() {\n      await getData().then(function (json){\n        let laps: Lap[] = [];\n        laps = json\n        laps.forEach(lap =>{\n          sessionBigData.drivers?.forEach(driver => {\n            if (driver.id === lap.driverId){\n              lap.driverName = driver.shortName;\n            }\n          });\n        });\n\n        setLapData(json);\n        setLoading(false)\n      }).catch( err =>{\n          setError(err.message)\n          setLoading(false);\n        }\n      );\n    }\n    fetchData();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (loading){\n    return <Loading/>\n  }\n\n  if (error.length > 0){\n    return(\n      <Error msg={error}/>\n    );\n  }\n\n  return (\n    <div className={\"overflow-x-auto mt-5 col-span-4 bg-base-300 p-4 rounded-box w-full\"}>\n      <table className={\"table w-full\"}>\n        <thead>\n        <tr>\n          <th>id</th>\n          <th>Name</th>\n          <th>Laptime</th>\n          <th>Split 1</th>\n          <th>Split 2</th>\n          <th>Split 3</th>\n          <th>Valid</th>\n        </tr>\n        </thead>\n        <tbody>\n        {lapData.map(lap =>\n          <LapEntry\n            lap={lap}\n            bestLapTime={bestLapTime}\n          />)}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import SessionInformation from \"./SessionInformation\";\nimport React, {useEffect, useState} from \"react\";\nimport Error from \"../../Error\";\nimport Loading from \"../../Loading\";\nimport SessionBigData from \"../../interfaces/SessionBigData\";\nimport DriverInformation from \"./DriverInformation\";\nimport LapTable from \"./LapTable\";\nimport UseAPI from \"../../api/UseAPI\";\nimport Car from \"../../interfaces/Car\";\nimport {Lap} from \"../../interfaces/Lap\";\nimport Driver from \"../../interfaces/Driver\";\n\nexport interface propId {\n  id: string\n}\n\nexport default function Session({id}: propId) {\n  const [data, setData] = useState({\n    session: {},\n    cars: [] as Car[],\n    laps: [] as Lap[],\n    drivers: [] as Driver[]\n  } as SessionBigData);\n\n  const useAPI = UseAPI('getSession', id)\n\n  useEffect(() => {\n    async function compileData() {\n      const temp: SessionBigData = useAPI.data[0]\n      if (!useAPI.isLoading) {\n        temp.session.bestLapTime = Number.MAX_VALUE\n        temp.drivers?.forEach(driver => {\n          driver.bestLapTimeNum = Number.MAX_VALUE\n          temp.laps?.forEach(lap => {\n            if (driver.id === lap.driverId && lap.lapTime < driver.bestLapTimeNum) {\n              driver.bestLapTimeNum = lap.lapTime;\n              driver.bestLapTime = lap.lapTimeFormatted;\n\n              if (lap.lapTime < temp.session.bestLapTime) {\n                temp.session.bestLapTimeFormatted = lap.lapTimeFormatted\n                temp.session.bestLapTime = lap.lapTime\n                temp.session.bestDriver = (driver.shortName + \" \" + driver.firstName + \" \" + driver.lastName)\n              }\n            }\n          });\n        })\n\n        temp.laps?.forEach(lap => {\n          if (lap.lapTime === temp.session.bestLapTime) {\n            lap.fastestLap = true;\n          }\n        });\n\n        setData(temp)\n      }\n    }\n\n    compileData();\n  }, [useAPI.isLoading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (useAPI.isLoading) {\n    return <Loading/>\n  }\n\n  if (useAPI.error.length > 0) {\n    return (\n      <Error msg={useAPI.error}/>\n    );\n  }\n\n  if (data.session != null && data.drivers != null && data.drivers.length > 0) {\n    return (\n      <div>\n        <div className=\"flex flex-row w-full\">\n          <div className=\"grid h-auto card bg-base-300 rounded-box place-items-center mb-3\">\n            <SessionInformation created_at={data.session.created_at} id={data.session.id}\n                                metaData={data.session.metaData} raceWeekendIndex={data.session.raceWeekendIndex}\n                                serverName={data.session.serverName} sessionIndex={data.session.sessionIndex}\n                                sessionType={data.session.sessionType} trackName={data.session.trackName}\n                                updated_at={data.session.updated_at} bestLapTime={data.session.bestLapTime}\n                                bestLapTimeFormatted={data.session.bestLapTimeFormatted}\n                                bestDriver={data.session.bestDriver}/>\n          </div>\n          <div className=\"overflow-x-auto mb-3 ml-5 col-span-4 bg-base-300 p-4 rounded-box w-full\">\n            <table className=\"table-zebra table w-full\">\n              <thead>\n              <tr>\n                <th>Driver</th>\n                <th>Name</th>\n                <th>Shortname</th>\n                <th>Best lap time</th>\n                <th></th>\n              </tr>\n              </thead>\n              <tbody>\n              {data.drivers.map(x =>\n                <DriverInformation driver={x} bestLapTime={data.session.bestLapTimeFormatted}/>\n              )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <LapTable bestLapTime={data.session.bestLapTimeFormatted} sessionBigData={data}/>\n      </div>\n    );\n  }\n\n  return (\n    <div/>\n  );\n}\n","import UseAPI from \"../../../api/UseAPI\";\nimport Loading from \"../../../Loading\";\nimport React from \"react\";\n\ninterface props {\n  id: number\n}\n\nexport default function CarNameById({id}: props) {\n  const useAPI = UseAPI('getSpecificCarByCarId', id)\n\n  if (useAPI.isLoading)\n    return (\n      <Loading/>\n    )\n\n  return(\n    <>{useAPI.data[0] === undefined ? \"error\" : useAPI.data[0].carName}</>\n  )\n}\n","import React from \"react\";\nimport Loading from \"../../../Loading\";\nimport Error from \"../../../Error\";\nimport UseAPI from \"../../../api/UseAPI\";\nimport CarNameById from \"../Cars/CarNameById\";\n\nexport interface propId {\n  id: string\n}\n\nexport default function DriverStats({id}: propId) {\n  const useAPI = UseAPI('getTimesOfDriverById', id)\n  const playerData = UseAPI('getPlayerById', id)\n\n  if (useAPI.isLoading || playerData.isLoading) {\n    return <Loading/>\n  }\n\n  if (useAPI.error.length > 0) {\n    return (\n      <Error msg={useAPI.error}/>\n    );\n  }\n\n  return (\n    <div>\n      <div className={\"relative h-auto text-white mb-3 col-span-4 bg-base-300 p-4 rounded-box w-full\"}>\n        <p className={\"text-2xl\"}>Some maybe useful information about {playerData.data[0].firstName + \" \\\"\" + playerData.data[0].shortName + \"\\\" \" + playerData.data[0].lastName}:</p>\n      </div>\n      <div className={\"divider\"}/>\n      <div className={\"relative h-auto text-white mb-3 bg-base-300 p-4 rounded-box w-full\"}>\n        <p className={\"text-xl\"}>Besttimes per Track</p>\n        <div className={\"divider\"}/>\n        <div className={\"grid grid-cols-3 gap-4 xl:grid-cols-5 2xl:grid-cols-8\"}>\n          {useAPI.data.map(x =>\n            <div className={\"h-auto text-white bg-base-100 p-4 rounded-box w-full\"}>\n              <p>Track: {x.trackName}</p>\n              <p>Time: {x.bestLapTimeFormatted}</p>\n              <CarNameById id={x.bestTimeCarId}/>\n              <a href={\"/session/\" + x.bestTimeSessionId}><button className={\"btn btn-sm w-full mt-1\"}>Go To Session</button></a>\n            </div>\n          )}\n        </div>\n      </div>\n\n    </div>\n  )\n}\n","import React from \"react\";\nimport DriveSession from \"../../../interfaces/DriveSession\";\nimport Loading from \"../../../Loading\";\nimport UseAPI from \"../../../api/UseAPI\";\n\nexport default function AllSessionsTable() {\n  const useAPI = UseAPI('getSessions')\n\n  if (useAPI.isLoading){\n    return (\n      <Loading/>\n    );\n  }\n\n  return(\n    <div>\n      <div className={\"col-span-1 h-10 card bg-base-300 rounded-box place-items-center mr-2\"}>\n        <h1 className={\"align-middle m-auto\"}>All sessions</h1>\n      </div>\n      <div className=\"overflow-x-auto mt-2 mr-2\">\n        <table className=\"table w-full\">\n          <thead>\n          <tr>\n            <th/>\n            <th>Session</th>\n            <th>Session type</th>\n            <th>Date</th>\n          </tr>\n          </thead>\n          <tbody >\n          {useAPI.data.map(item =>\n            <SessionRow created_at={item.created_at}\n                        id={item.id}\n                        metaData={item.metaData}\n                        raceWeekendIndex={item.raceWeekendIndex}\n                        serverName={item.serverName}\n                        sessionIndex={item.sessionIndex}\n                        sessionType={item.sessionType}\n                        trackName={item.trackName}\n                        updated_at={item.updated_at}\n                        bestLapTimeFormatted={item.bestLapTimeFormatted}\n                        bestLapTime={item.bestLapTime}\n                        bestDriver={item.bestDriver}/>)}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction SessionRow(driveSession: DriveSession){\n  return(\n    <tr>\n      <td><a href={\"/session/\" + driveSession.id}><button className={\"btn\"}>Go To Session</button></a></td>\n      <td >{driveSession.trackName}</td>\n      <td >{driveSession.sessionType}</td>\n      <td >{driveSession.created_at}</td>\n    </tr>\n  );\n}\n","import React, {useEffect, useState} from \"react\";\nimport useGetRequest from \"../../../api/useGetRequest\";\nimport Loading from \"../../../Loading\";\nimport TrackTimes from \"../../../interfaces/TrackTimes\";\nimport Driver from \"../../../interfaces/Driver\";\n\nexport default function HighscoreBoard(){\n  const [data, setData] = useState([] as TrackTimes[]);\n  const [loading, setLoading] = useState(true);\n  const {getData} = useGetRequest({path: \"https://acc-api.aptinstall.de/tracks/times\"});\n\n  useEffect(() => {\n    async function fetchData() {\n      await getData().then(function (json){\n        setData(json);\n        setLoading(false)\n      });\n    }\n    fetchData();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (loading){\n    return (\n      <Loading/>\n    );\n  }\n\n  return(\n    <div>\n      <div className={\"col-span-1 h-10 card bg-base-300 rounded-box place-items-center\"}>\n        <h1 className={\"align-middle m-auto\"}>Track scoreboard</h1>\n      </div>\n      <div className=\"overflow-x-auto mt-2\">\n        <table className=\"table w-full\">\n          <thead>\n          <tr>\n            <th/>\n            <th>Track</th>\n            <th>Best laptime</th>\n            <th>player</th>\n          </tr>\n          </thead>\n          <tbody >\n          {data.map(item =>\n            <TrackRow\n              avgLapTime={item.avgLapTime}\n              avgLapTimeFormatted={item.avgLapTimeFormatted}\n              bestLapTime={item.bestLapTime}\n              bestLapTimeFormatted={item.bestLapTimeFormatted}\n              bestTimedriverId={item.bestTimedriverId}\n              trackName={item.trackName}\n              bestTimeSessionId={item.bestTimeSessionId}/>)}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction TrackRow(trackTimes: TrackTimes){\n  const [data, setData] = useState({} as Driver);\n  const [loading, setLoading] = useState(true);\n  const {getData} = useGetRequest({path: `https://acc-api.aptinstall.de/driver/${trackTimes.bestTimedriverId}`});\n\n  useEffect(() => {\n    async function fetchData() {\n      await getData().then(function (json){\n        setData(json);\n        setLoading(false)\n      });\n    }\n    fetchData();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (loading){\n    return (\n      <td>\n        <Loading/>\n      </td>\n    );\n  }\n\n  return(\n    <tr>\n      <td><a href={\"/session/\" + trackTimes.bestTimeSessionId}><button className={\"btn\"}>Go To Session</button></a></td>\n      <td>{trackTimes.trackName}</td>\n      <td >{trackTimes.bestLapTimeFormatted}</td>\n      <td >{(data.shortName + \" - \" + data.firstName + \" \" + data.lastName)}</td>\n    </tr>\n  );\n}\n","import AllSessionsTable from \"./AllSessionsTable\";\nimport HighscoreBoard from \"./HighscoreBoard\";\nimport React from \"react\";\n\nexport default function SessionselectionPage() {\n  return (\n    <div className={\"grid grid-cols-2\"}>\n      <AllSessionsTable/>\n      <HighscoreBoard/>\n    </div>\n  )\n}\n","import React from \"react\";\nimport UseAPI from \"../../../api/UseAPI\";\nimport Loading from \"../../../Loading\";\n\nexport default function AllDriver() {\n  const api = UseAPI('getAllDrivers')\n\n  if (api.isLoading)\n    return (\n      <Loading/>\n    )\n\n  return (\n    <div className={\"h-1/12 text-white mb-3 bg-base-300 p-4 rounded-box w-full\"}>\n      <p className={\"text-3xl\"}>All Drivers (to search someone use \"STRG + F\")</p>\n      {api.data.map(x =>\n        <div className={\"flex flex-row\"}>\n          <p>{x.shortName} {x.firstName} {x.lastName}</p>\n          <a href={\"/driver/\" + x.id}><button className={\"btn btn-sm ml-3\"}>Go To Driver</button></a>\n        </div>\n      )}\n    </div>\n  )\n}\n","import React from 'react';\nimport './App.scss';\nimport './index.scss'\nimport MainLanderPage from \"./sessions/MainLanderPage\";\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport Session from \"./sessions/session/Session\";\nimport DriverStats from \"./sessions/stats/driverStats/DriverStats\";\nimport SessionselectionPage from \"./sessions/stats/sessionSelectionPages/SessionselectionPage\";\nimport AllDriver from \"./sessions/stats/driverStats/AllDriver\";\n\n\nfunction App() {\n  return (\n    <div className={\"h-full rounded-md m-4\"}>\n      <div className={\"flex flex-row\"}>\n        <div className=\"alert mb-4\">\n          <div className=\"flex-1\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"#2196f3\"\n                 className=\"w-6 h-6 mx-2\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                    d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n            </svg>\n            <label>This website is sill under development. Errors may occur and some features could appear to be\n              missing.\n              This is indeed in a pre-alpha state. But anyway, visit our Teamspeak @ ts.germandeathsystem.de</label>\n          </div>\n        </div>\n      </div>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/session/:id\" render={(props) => (\n            <Session id={props.match.params.id}/>\n          )}/>\n          <Route exact path=\"/driver/:id\" render={(props) => (\n            <DriverStats id={props.match.params.id}/>\n          )}/>\n          <Route path=\"/sessions\">\n            <SessionselectionPage/>\n          </Route>\n          <Route path=\"/drivers\">\n            <AllDriver/>\n          </Route>\n          <Route path=\"/\">\n            <MainLanderPage/>\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}