{"version":3,"sources":["api/useGetRequest.tsx","Loading.tsx","sessions/HighscoreBoard.tsx","api/endpoints.ts","api/APIService.tsx","api/UseAPI.tsx","sessions/AllSessionsTable.tsx","Error.tsx","sessions/stats/generalServerStats/GeneralServerStats.tsx","sessions/MainLanderPage.tsx","App.tsx","reportWebVitals.ts","sessions/session/SessionInformation.tsx","sessions/session/DriverInformation.tsx","sessions/session/LapEntry.tsx","sessions/session/LapTable.tsx","sessions/session/Session.tsx","sessions/stats/driverStats/CarNameById.tsx","sessions/stats/driverStats/DriverStats.tsx","index.tsx"],"names":["useGetRequest","path","getData","fetch","method","headers","undefined","then","response","a","ok","Error","json","Loading","className","HighscoreBoard","useState","data","setData","loading","setLoading","useEffect","fetchData","map","item","TrackRow","avgLapTime","avgLapTimeFormatted","bestLapTime","bestLapTimeFormatted","bestTimedriverId","trackName","bestTimeSessionId","trackTimes","href","shortName","firstName","lastName","baseUrl","BackendEndpointSessions","BackendEndpointSession","getRequest","APIService","getSessions","getSession","id","push","getTimesOfDriverById","console","log","getCarModels","convertedCarmodels","Object","entries","key","value","name","getSpecificCarByCarId","UseAPI","params","isLoading","setIsLoading","error","setError","temp","message","AllSessionsTable","useAPI","SessionRow","created_at","metaData","raceWeekendIndex","serverName","sessionIndex","sessionType","updated_at","bestDriver","driveSession","xmlns","fill","viewBox","d","msg","GeneralServerStats","stats","setStats","drivers","setDrivers","statRequest","driverRequest","piechartConfig","labels","datasets","label","totalInvalidLaps","totalValidLaps","backgroundColor","hoverOffset","catch","err","fetchDataDrivers","fetchDataStats","length","options","responsive","color","x","MainLanderPage","stroke","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SessionInformation","substr","DriverInformation","driver","LapEntry","lap","driverName","lapTimeFormatted","split1Formatted","split2Formatted","split3Formatted","JaNein","num","isValidForBest","LapTable","sessionBigData","lapData","setLapData","session","forEach","driverId","carId","lapTime","sessionId","split1","split2","split3","fastestLap","Session","cars","laps","bestLapTimeNum","Number","MAX_VALUE","compileData","playerId","CarNameById","carName","DriverStats","bestTimeCarId","ReactDOM","render","StrictMode","exact","props","match","document","getElementById"],"mappings":"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","file":"static/js/main.b6d19494.chunk.js","sourcesContent":["interface GetRequestProps {\n  readonly path: string;\n}\n\nexport default function useGetRequest({ path }: GetRequestProps) {\n  const getData = () => fetch(path, {\n    method: \"get\",\n    headers: \"\"\n      ? new Headers({\n        \"Content-Type\": \"application/json\"\n      }) : undefined\n  }).then(async (response) => {\n    if (!response.ok){\n      throw Error(\"Could not fetch data\");\n    }\n    return response.json()\n  });\n\n  return { getData  };\n}\n","export default function Loading(){\n  return(\n    <button className=\"btn btn-lg loading\">loading</button>\n  );\n}\n","import React, {useEffect, useState} from \"react\";\nimport useGetRequest from \"../api/useGetRequest\";\nimport Loading from \"../Loading\";\nimport TrackTimes from \"../interfaces/TrackTimes\";\nimport Driver from \"../interfaces/Driver\";\n\nexport default function HighscoreBoard(){\n  const [data, setData] = useState([] as TrackTimes[]);\n  const [loading, setLoading] = useState(true);\n  const {getData} = useGetRequest({path: \"https://acc-api.aptinstall.de/tracks/times\"});\n\n  useEffect(() => {\n    async function fetchData() {\n      await getData().then(function (json){\n        setData(json);\n        setLoading(false)\n      });\n    }\n    fetchData();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (loading){\n    return (\n      <Loading/>\n    );\n  }\n\n  return(\n    <div>\n      <div className={\"col-span-1 h-10 card bg-base-300 rounded-box place-items-center\"}>\n        <h1 className={\"align-middle m-auto\"}>Track scoreboard</h1>\n      </div>\n      <div className=\"overflow-x-auto mt-2\">\n        <table className=\"table w-full\">\n          <thead>\n          <tr>\n            <th/>\n            <th>Track</th>\n            <th>Best laptime</th>\n            <th>player</th>\n          </tr>\n          </thead>\n          <tbody >\n          {data.map(item =>\n            <TrackRow\n              avgLapTime={item.avgLapTime}\n              avgLapTimeFormatted={item.avgLapTimeFormatted}\n              bestLapTime={item.bestLapTime}\n              bestLapTimeFormatted={item.bestLapTimeFormatted}\n              bestTimedriverId={item.bestTimedriverId}\n              trackName={item.trackName}\n              bestTimeSessionId={item.bestTimeSessionId}/>)}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction TrackRow(trackTimes: TrackTimes){\n  const [data, setData] = useState({} as Driver);\n  const [loading, setLoading] = useState(true);\n  const {getData} = useGetRequest({path: `https://acc-api.aptinstall.de/driver/${trackTimes.bestTimedriverId}`});\n\n  useEffect(() => {\n    async function fetchData() {\n      await getData().then(function (json){\n        setData(json);\n        setLoading(false)\n      });\n    }\n    fetchData();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (loading){\n    return (\n      <td>\n        <Loading/>\n      </td>\n    );\n  }\n\n  return(\n    <tr>\n      <td><a href={\"/session/\" + trackTimes.bestTimeSessionId}><button className={\"btn\"}>Go To Session</button></a></td>\n      <td>{trackTimes.trackName}</td>\n      <td >{trackTimes.bestLapTimeFormatted}</td>\n      <td >{(data.shortName + \" - \" + data.firstName + \" \" + data.lastName)}</td>\n    </tr>\n  );\n}\n","export const baseUrl = \"https://acc-api.aptinstall.de\"\n\nexport const BackendEndpointSessions = `${baseUrl}/sessions`;\nexport const BackendEndpointSession = `${baseUrl}/session`;\n\n","import {BackendEndpointSession, BackendEndpointSessions, baseUrl} from \"./endpoints\";\nimport DriveSession from \"../interfaces/DriveSession\";\nimport SessionBigData from \"../interfaces/SessionBigData\";\nimport {CarModel} from \"../interfaces/CarModel\";\nimport Car from \"../interfaces/Car\";\nimport {Besttimes} from \"../interfaces/Besttimes\";\n\nasync function getRequest(path: string) {\n  return fetch(path, {\n    method: \"get\",\n    headers: \"\"\n      ? new Headers({\n        \"Content-Type\": \"application/json\"\n      }) : undefined\n  }).then(async (response) => {\n    if (!response.ok){\n      throw Error(\"Could not fetch data\");\n    }\n    return response.json()\n  })\n}\n\nconst APIService = {\n  getSessions: async() => {\n    const response: DriveSession[] = await getRequest(`${BackendEndpointSessions}`)\n    return response\n  },\n\n  getSession: async(id: number) => {\n    const response: SessionBigData[] = [];\n    response.push(await getRequest(`${BackendEndpointSession}/${id}`))\n    return response\n  },\n\n  getTimesOfDriverById: async(id: number) => {\n    const response: Besttimes[] = await getRequest(`${baseUrl}/driver/${id}/times`)\n    console.log(response)\n    return response\n  },\n\n  getCarModels: async() => {\n    let convertedCarmodels: CarModel[] = []\n    const listItems = Object.entries(await getRequest(`${baseUrl}/car/models`))\n    // eslint-disable-next-line array-callback-return\n    listItems.map(([key, value]: any) => {\n      convertedCarmodels.push({id: key, name: value})\n    })\n    return convertedCarmodels\n  },\n\n  getSpecificCarByCarId: async(id: number) => {\n    const response: Car[] = [];\n    response.push(await getRequest(`${baseUrl}/car/${id}`))\n    return response\n  }\n}\n\nexport default APIService\n","import {useEffect, useState} from \"react\";\nimport APIService from \"./APIService\";\n\nexport default function UseAPI(method: string, ...params: any[]){\n  const [data, setData]           = useState([] as any[]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError]         = useState(\"\");\n\n  const fetchData = async () => {\n    setError(\"\");\n\n    try {\n      setIsLoading(true);\n      // @ts-ignore\n      const temp: any = await APIService[method](...params)\n      setData(temp);\n    } catch (e: any) {\n      setError(e.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => { fetchData() }, []);// eslint-disable-line react-hooks/exhaustive-deps\n\n  return { data, isLoading, error, fetchData };\n}\n","import React from \"react\";\nimport DriveSession from \"../interfaces/DriveSession\";\nimport Loading from \"../Loading\";\nimport UseAPI from \"../api/UseAPI\";\n\nexport default function AllSessionsTable() {\n  const useAPI = UseAPI('getSessions')\n\n  if (useAPI.isLoading){\n    return (\n      <Loading/>\n    );\n  }\n\n  return(\n    <div>\n      <div className={\"col-span-1 h-10 card bg-base-300 rounded-box place-items-center mr-2\"}>\n        <h1 className={\"align-middle m-auto\"}>All sessions</h1>\n      </div>\n      <div className=\"overflow-x-auto mt-2 mr-2\">\n        <table className=\"table w-full\">\n          <thead>\n          <tr>\n            <th/>\n            <th>Session</th>\n            <th>Session type</th>\n            <th>Date</th>\n          </tr>\n          </thead>\n          <tbody >\n          {useAPI.data.map(item =>\n            <SessionRow created_at={item.created_at}\n                        id={item.id}\n                        metaData={item.metaData}\n                        raceWeekendIndex={item.raceWeekendIndex}\n                        serverName={item.serverName}\n                        sessionIndex={item.sessionIndex}\n                        sessionType={item.sessionType}\n                        trackName={item.trackName}\n                        updated_at={item.updated_at}\n                        bestLapTimeFormatted={item.bestLapTimeFormatted}\n                        bestLapTime={item.bestLapTime}\n                        bestDriver={item.bestDriver}/>)}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction SessionRow(driveSession: DriveSession){\n  return(\n    <tr>\n      <td><a href={\"/session/\" + driveSession.id}><button className={\"btn\"}>Go To Session</button></a></td>\n      <td >{driveSession.trackName}</td>\n      <td >{driveSession.sessionType}</td>\n      <td >{driveSession.created_at}</td>\n    </tr>\n  );\n}\n","interface errorProp {\n  msg: string\n}\n\nexport default function Error(error: errorProp){\n  return(\n    <div className=\"alert alert-error m-4\">\n      <div className=\"flex-1\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" className=\"w-6 h-6 mx-2 stroke-current\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n        d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\"/>\n          </svg>\n          <label>{error.msg}</label>\n      </div>\n    </div>\n  )\n}\n","import Loading from \"../../../Loading\";\nimport Error from \"../../../Error\";\nimport React, {useEffect, useState} from \"react\";\nimport {Doughnut} from 'react-chartjs-2';\nimport useGetRequest from \"../../../api/useGetRequest\";\nimport {baseUrl} from \"../../../api/endpoints\";\nimport {OverallStats} from \"../../../interfaces/OverallStats\";\nimport Driver from \"../../../interfaces/Driver\";\n\nexport default function GeneralServerStats() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\")\n  const [stats, setStats] = useState({} as OverallStats)\n  const [drivers, setDrivers] = useState([] as Driver[])\n  const statRequest = useGetRequest({path: `${baseUrl}/stats`});\n  const driverRequest = useGetRequest({path: `${baseUrl}/drivers`});\n  const piechartConfig = {\n    labels: [\n      'invalid laps',\n      'valid laps',\n    ],\n    datasets: [{\n      label: 'LapsData',\n      data: [stats.totalInvalidLaps, stats.totalValidLaps],\n      backgroundColor: [\n        'rgb(255,0,0)',\n        'rgb(48,255,0)',\n      ],\n      hoverOffset: 0\n    }],\n  };\n\n  useEffect(() => {\n    async function fetchDataStats() {\n      await statRequest.getData().then(function (json){\n        setStats(json)\n        setLoading(false)\n      }).catch( err =>{\n          setError(err.message)\n          setLoading(false);\n        }\n      );\n    }\n    async function fetchDataDrivers() {\n      await driverRequest.getData().then(function (json){\n        setDrivers(json)\n        setLoading(false)\n      }).catch( err =>{\n          setError(err.message)\n          setLoading(false);\n        }\n      );\n    }\n    fetchDataDrivers();\n    fetchDataStats();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (loading){\n    return <Loading/>\n  }\n\n  if (error.length > 0){\n    return(\n      <Error msg={error}/>\n    );\n  }\n\n  return (\n    <div className={\"w-100 grid grid-rows-1 grid-cols-2 gap-4\"}>\n      <div className={\"h-auto text-white mb-3 bg-base-300 p-4 rounded-box w-full\"}>\n        <Doughnut data={piechartConfig} options={{responsive: true, color: \"red\"}}/>\n\n      </div>\n      <div className={\"h-1/12 text-white mb-3 bg-base-300 p-4 rounded-box w-full\"}>\n        <p className={\"text-3xl\"}>All Drivers</p>\n        {drivers.map(x =>\n          <div className={\"flex flex-row\"}>\n            <p>{x.shortName} {x.firstName} {x.lastName}</p>\n            <a href={\"/driver/\" + x.id}><button className={\"btn\"}>Go To Driver</button></a>\n          </div>\n        )}\n      </div>\n    </div>\n\n  )\n}\n","import React from \"react\";\nimport HighscoreBoard from \"./HighscoreBoard\";\nimport AllSessionsTable from \"./AllSessionsTable\";\nimport GeneralServerStats from \"./stats/generalServerStats/GeneralServerStats\";\n\n\nexport default function MainLanderPage() {\n  return(\n    <div>\n      <div className=\"alert mb-2\">\n        <div className=\"flex-1\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"#2196f3\"\n               className=\"w-6 h-6 mx-2\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n          </svg>\n          <label>This website is sill under development. Errors may occur and some features could appear to be missing. This is indeed in a pre-alpha state. But anyway, visit our Teamspeak @ ts.germandeathsystem.de</label>\n        </div>\n      </div>\n      <div className={\"grid grid-cols-2\"}>\n        <AllSessionsTable/>\n        <HighscoreBoard/>\n      </div>\n      <GeneralServerStats/>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.scss';\nimport './index.scss'\nimport MainLanderPage from \"./sessions/MainLanderPage\";\n\n\nfunction App() {\n  return (\n    <div className={\"lander w-full h-full rounded-md px-4 py-4\"}>\n      <h2>\n        <MainLanderPage/>\n      </h2>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import DriveSession from \"../../interfaces/DriveSession\";\n\nexport default function SessionInformation(driveSession: DriveSession) {\n  return (\n    <div>\n      <div className=\"h-10 w-11/12 card bg-base-200 rounded-box place-items-center w-auto m-2 p-2\">\n        <h2>Sessioninformation</h2>\n      </div>\n      <div className=\"h-10 w-11/12 card bg-base-200 rounded-box place-items-center m-2 p-2\">\n        {driveSession.created_at}\n      </div>\n      <div className=\"h-10 card w-11/12 bg-base-200 rounded-box place-items-center m-2 p-2\">\n        {driveSession.trackName}\n      </div>\n      <div className=\"h-auto card w-11/12 bg-base-200 rounded-box place-items-center m-2 p-2\">\n        {driveSession.serverName}\n      </div>\n      <div className=\"h-auto card w-11/12 bg-base-200 rounded-box place-items-center m-2 p-2\">\n        Best Laptime overall: {driveSession.bestLapTimeFormatted} | {driveSession.bestDriver.substr(0,3)}\n      </div>\n    </div>\n  );\n}\n","import Driver from \"../../interfaces/Driver\";\nimport React from \"react\";\n\nexport default function DriverInformation(driver: Driver) {\n  return(\n    <tr>\n      <td>{driver.firstName}</td>\n      <td className={\"content-end\"}>{driver.lastName}</td>\n      <td>{driver.shortName}</td>\n      <td>{driver.bestLapTime}</td>\n      <td><a href={\"/driver/\" + driver.id}><button className={\"btn\"}>Go To Driver</button></a></td>\n    </tr>\n  );\n}\n","import {Lap} from \"../../interfaces/Lap\";\nimport React from \"react\";\n\ninterface IJaNein {\n  num: number\n}\n\nexport default function LapEntry(lap: Lap){\n  return(\n    <tr>\n      <td>{lap.id}</td>\n      <td>{lap.driverName}</td>\n      <td>{lap.lapTimeFormatted}</td>\n      <td>{lap.split1Formatted}</td>\n      <td>{lap.split2Formatted}</td>\n      <td>{lap.split3Formatted}</td>\n      <JaNein num={lap.isValidForBest}/>\n    </tr>\n  );\n}\n\nfunction JaNein(num: IJaNein){\n  if (num.num === 1){\n    return (\n      <td>\n        Yes\n      </td>\n    )\n  }\n  return (\n    <td>\n      No\n    </td>\n  );\n}\n","import React, {useEffect, useState} from \"react\";\nimport useGetRequest from \"../../api/useGetRequest\";\nimport {BackendEndpointSession} from \"../../api/endpoints\";\nimport Loading from \"../../Loading\";\nimport Error from \"../../Error\";\nimport {Lap} from \"../../interfaces/Lap\";\nimport SessionBigData from \"../../interfaces/SessionBigData\";\nimport LapEntry from \"./LapEntry\";\n\n\nexport default function LapTable(sessionBigData: SessionBigData){\n  const [lapData, setLapData] = useState([] as Lap[]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\")\n  const path = `${BackendEndpointSession}/${sessionBigData.session?.id}/laps`;\n  const {getData} = useGetRequest({path: path})\n\n  useEffect(() => {\n    async function fetchData() {\n      await getData().then(function (json){\n        let laps: Lap[] = [];\n        laps = json\n        laps.forEach(lap =>{\n          sessionBigData.drivers?.forEach(driver => {\n            if (driver.id === lap.driverId){\n              lap.driverName = driver.shortName;\n            }\n          });\n        });\n\n        setLapData(json);\n        setLoading(false)\n      }).catch( err =>{\n          setError(err.message)\n          setLoading(false);\n        }\n      );\n    }\n    fetchData();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (loading){\n    return <Loading/>\n  }\n\n  if (error.length > 0){\n    return(\n      <Error msg={error}/>\n    );\n  }\n\n  return (\n    <div className={\"overflow-x-auto mt-5 col-span-4 bg-base-300 p-4 rounded-box w-6/12\"}>\n      <table className={\"table\"}>\n        <thead>\n        <tr>\n          <th>id</th>\n          <th>Name</th>\n          <th>Laptime</th>\n          <th>Split 1</th>\n          <th>Split 2</th>\n          <th>Split 3</th>\n          <th>Valid</th>\n        </tr>\n        </thead>\n        <tbody>\n        {lapData.map(lap =>\n          <LapEntry\n            carId={lap.carId}\n            created_at={lap.created_at}\n            driverId={lap.driverId}\n            id={lap.id}\n            isValidForBest={lap.isValidForBest}\n            lapTime={lap.lapTime}\n            lapTimeFormatted={lap.lapTimeFormatted}\n            sessionId={lap.sessionId}\n            split1={lap.split1}\n            split1Formatted={lap.split1Formatted}\n            split2={lap.split2}\n            split2Formatted={lap.split2Formatted}\n            split3={lap.split3}\n            split3Formatted={lap.split3Formatted}\n            updated_at={lap.updated_at}\n            driverName={lap.driverName}\n            fastestLap={lap.fastestLap}\n          />)}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import SessionInformation from \"./SessionInformation\";\nimport React, {useEffect, useState} from \"react\";\nimport Error from \"../../Error\";\nimport Loading from \"../../Loading\";\nimport SessionBigData from \"../../interfaces/SessionBigData\";\nimport DriverInformation from \"./DriverInformation\";\nimport LapTable from \"./LapTable\";\nimport UseAPI from \"../../api/UseAPI\";\nimport Car from \"../../interfaces/Car\";\nimport {Lap} from \"../../interfaces/Lap\";\nimport Driver from \"../../interfaces/Driver\";\n\nexport interface propId {\n  id: string\n}\n\nexport default function Session({id}: propId) {\n  const [data, setData] = useState({\n    session: {},\n    cars: [] as Car[],\n    laps: [] as Lap[],\n    drivers: [] as Driver[]\n  } as SessionBigData);\n\n  const useAPI = UseAPI('getSession', id)\n\n  useEffect(() => {\n    async function compileData() {\n      const temp: SessionBigData = useAPI.data[0]\n      if (!useAPI.isLoading) {\n        temp.drivers?.forEach(driver => {\n          driver.bestLapTimeNum = Number.MAX_VALUE\n          temp.session.bestLapTime = Number.MAX_VALUE\n          temp.laps?.forEach(lap => {\n            if (driver.id === lap.driverId && lap.lapTime < driver.bestLapTimeNum) {\n              driver.bestLapTimeNum = lap.lapTime;\n              driver.bestLapTime = lap.lapTimeFormatted;\n            }\n            if (lap.lapTime < temp.session.bestLapTime) {\n              temp.session.bestLapTimeFormatted = lap.lapTimeFormatted\n              temp.session.bestLapTime = lap.lapTime\n              temp.session.bestDriver = (driver.shortName + driver.firstName + driver.lastName)\n            }\n          });\n        })\n\n        temp.laps?.forEach(lap => {\n          if (lap.lapTime === temp.session.bestLapTime) {\n            lap.fastestLap = true;\n          }\n        });\n\n        setData(temp)\n      }\n    }\n\n    compileData();\n  }, [useAPI.isLoading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (useAPI.isLoading) {\n    return <Loading/>\n  }\n\n  if (useAPI.error.length > 0) {\n    return (\n      <Error msg={useAPI.error}/>\n    );\n  }\n\n  if (data.session != null && data.drivers != null && data.drivers.length > 0) {\n    return (\n      <div className={\"p-5\"}>\n        <div className=\"flex flex-row w-full\">\n          <div className=\"grid h-auto card bg-base-300 rounded-box place-items-center mb-3 p-2\">\n            <SessionInformation created_at={data.session.created_at} id={data.session.id}\n                                metaData={data.session.metaData} raceWeekendIndex={data.session.raceWeekendIndex}\n                                serverName={data.session.serverName} sessionIndex={data.session.sessionIndex}\n                                sessionType={data.session.sessionType} trackName={data.session.trackName}\n                                updated_at={data.session.updated_at} bestLapTime={data.session.bestLapTime}\n                                bestLapTimeFormatted={data.session.bestLapTimeFormatted}\n                                bestDriver={data.session.bestDriver}/>\n          </div>\n          <div className=\"overflow-x-auto mb-3 ml-5 col-span-4 bg-base-300 p-4 rounded-box w-5/12\">\n            <table className=\"table-zebra table w-full\">\n              <thead>\n              <tr>\n                <th>Driver</th>\n                <th>Name</th>\n                <th>Shortname</th>\n                <th>Best lap time</th>\n                <th></th>\n              </tr>\n              </thead>\n              <tbody>\n              {data.drivers.map(x =>\n                <DriverInformation created_at={x.created_at} firstName={x.firstName} id={x.id} lastName={x.lastName}\n                                   playerId={x.playerId} shortName={x.shortName} updated_at={x.updated_at}\n                                   bestLapTime={x.bestLapTime} bestLapTimeNum={x.bestLapTimeNum}/>\n              )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <LapTable session={data.session} cars={data.cars} drivers={data.drivers}/>\n      </div>\n    );\n  }\n\n  return (\n    <div/>\n  );\n}\n","import UseAPI from \"../../../api/UseAPI\";\nimport Loading from \"../../../Loading\";\n\ninterface props {\n  id: number\n}\n\nexport default function CarNameById({id}: props) {\n  const useAPI = UseAPI('getSpecificCarByCarId', id)\n\n  if (useAPI.isLoading)\n    return (\n      <Loading/>\n    )\n\n  return(\n    <>{useAPI.data[0] === undefined ? \"error\" : useAPI.data[0].carName}</>\n  )\n}\n","import React from \"react\";\nimport Loading from \"../../../Loading\";\nimport Error from \"../../../Error\";\nimport UseAPI from \"../../../api/UseAPI\";\nimport CarNameById from \"./CarNameById\";\n\nexport interface propId {\n  id: string\n}\n\nexport default function DriverStats({id}: propId) {\n  const useAPI = UseAPI('getTimesOfDriverById', id)\n\n  if (useAPI.isLoading) {\n    return <Loading/>\n  }\n\n  if (useAPI.error.length > 0) {\n    return (\n      <Error msg={useAPI.error}/>\n    );\n  }\n\n  return (\n    <>\n      <div>\n        {useAPI.data.map(x =>\n          <div className={\"relative h-auto text-white mb-3 col-span-4 bg-base-300 p-4 rounded-box w-4/12\"}>\n            <p>{x.trackName}</p>\n            <p>{x.bestLapTimeFormatted}</p>\n            <CarNameById id={x.bestTimeCarId}/>\n          </div>\n        )}\n      </div>\n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Session from \"./sessions/session/Session\";\nimport DriverStats from \"./sessions/stats/driverStats/DriverStats\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/session/:id\" render={(props) => (\n          <Session id={props.match.params.id}/>\n        )} />\n        <Route exact path=\"/driver/:id\" render={(props) => (\n          <DriverStats id={props.match.params.id}/>\n        )} />\n        <Route path=\"/\">\n          <App/>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}